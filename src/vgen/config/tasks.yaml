high_level_planning_task:
  description: >
   Based on the {Target_Problem} think what you know about this, set up a sequential implementation plans. Each subtask should focus on implement only one signal at a time 
   and don't create entire verilog code for the {Target_Problem}.
   Rules:
    Make sure the task plans satisfy the following rules! Do not make the plans that violate the following rules!!!
    Make a plan to define the module with its input and output first.
    Do not plan the implementation of logic or signal from the input ports.
    There is test bench to test the functional correctness. Do not plan generating testbench to test the generated verilog code.
    Don't make a plan only with clock or control signals. The clock or control signals should be planned with register or wire signal.
    Don't make a plan on implementing the signal or next state logics which are not related to the module outputs.
    For module related to Finite State Machine (FSM), try to determine the number of states first and then make the plan to implement FSM.
    For module related to Finite State Machine or Moore State Machine, if the state or current_state is an input port signal of the module, 
    You must Do Not implement the state flip-flops for state transition in TopModule.
  expected_output: >
   The expected output should be a JSON object named Sub-Task containing a list of tasks. Each task should be represented as a JSON object with the following fields:
   - id: A unique identifier for the task and indicates the sequential order.
   - content: task discription.
   - source: The source code or context related to the task.
  agent: planner
